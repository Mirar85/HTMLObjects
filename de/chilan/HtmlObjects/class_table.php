<?phpnamespace de\chilan\HtmlObjects;use \Exception as Exception;class caption extends attribute{	private $_align = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		} 	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': { $this->_align = $this->is_align($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': { return $this->_align; }break;			default:  parent::__get($element);		}	}		public function getAlign() {return $this->_align; }	protected function convertThis()	{		$this->_htmlCode = "<caption";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</caption>\n";	}}class col extends attribute{	private $_align = NULL;	private $_char = NULL;	private $_charoff = NULL;	private $_span = NULL;	private $_valign = NULL;	private $_width = NULL;	public function __construct() { 		$this->initDOM();	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'char': {$this->_char = $this->cdata($x); }break;			case 'charoff': {$this->_align = $this->cdata($x); }break;			case 'span': {$this->_span = $this->zahlen($x); }break;			case 'valign': {$this->_valign = $this->is_valign($x); }break;			case 'width': {$this->_width = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'char': {return $this->_char; }break;			case 'charoff': {return $this->_align; }break;			case 'span': {return $this->_span; }break;			case 'valign': {return $this->_valign; }break;			case 'width': {return $this->_width; }break;			default:  parent::__get($element);		}	}	public function getAlign() { return $this->_align; }	public function getChar() { return $this->_char; }	public function getCharoff() { return $this->_align; }	public function getSpan() { return $this->_span; }	public function getValign() { return $this->_valign; }	public function getWidth() { return $this->_width; }	protected function convertThis()	{		$this->_htmlCode = "<col";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_char !== NULL) { $this->_htmlCode .= " char=\"$this->_char\""; }		if ($this->_charoff !== NULL) { $this->_htmlCode .= " charoff=\"$this->_charoff\""; }		if ($this->_span !== NULL) { $this->_htmlCode .= " span=\"$this->_span\""; }		if ($this->_valign !== NULL) { $this->_htmlCode .= " valign=\"$this->_valign\""; }		if ($this->_width !== NULL) { $this->_htmlCode .= " width=\"$this->_width\""; }		return $this->_htmlCode .= " />\n";	}}class colgroup extends attribute{	private $_align = NULL;	private $_char = NULL;	private $_charoff = NULL;	private $_span = NULL;	private $_valign = NULL;	private $_width = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'char': {$this->_char = $this->cdata($x); }break;			case 'charoff': {$this->_align = $this->cdata($x); }break;			case 'span': {$this->_span = $this->zahlen($x); }break;			case 'valign': {$this->_valign = $this->is_valign($x); }break;			case 'width': {$this->_width = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'char': {return $this->_char; }break;			case 'charoff': {return $this->_align; }break;			case 'span': {return $this->_span; }break;			case 'valign': {return $this->_valign; }break;			case 'width': {return $this->_width; }break;			default:  parent::__get($element);		}	}	public function align() { return $this->_align; }	public function char() { return $this->_char; }	public function charoff() { return $this->_align; }	public function span() { return $this->_span; }	public function valign() { return $this->_valign; }	public function width() { return $this->_width; }	protected function convertThis()	{		$this->_htmlCode = "<colgroup";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_char !== NULL) { $this->_htmlCode .= " char=\"$this->_char\""; }		if ($this->_charoff !== NULL) { $this->_htmlCode .= " charoff=\"$this->_charoff\""; }		if ($this->_span !== NULL) { $this->_htmlCode .= " span=\"$this->_span\""; }		if ($this->_valign !== NULL) { $this->_htmlCode .= " valign=\"$this->_valign\""; }		if ($this->_width !== NULL) { $this->_htmlCode .= " width=\"$this->_width\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "\n</colgroup>\n";	}}class dd extends attribute{	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<dd";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</dd>\n";	}}class dl extends attribute{	private $_compact = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'compact': {return $this->_compact; }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'compact': {$this->_compact = $this->is_compact($x); }break;			default:  parent::__get($element);		}	}	public function getCompact() {return $this->_compact; }	protected function convertThis()	{		$this->_htmlCode = "<dl";		parent::convertThis();		if ($this->_compact !== NULL) { $this->_htmlCode .= " compact=\"$this->_compact\""; }		$this->_htmlCode .= ">";		$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</dl>\n";	}}class dt extends attribute{	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<dt";		parent::convertThis();		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</dt>\n";	}}class table extends attribute{	private $_align = NULL;	private $_border = NULL;	private $_bgcolor = NULL;	private $_cellpadding = NULL;	private $_cellspacing = NULL;	private $_datafld = NULL;	private $_datasrc = NULL;	private $_dataformatas = NULL;	private $_frame = NULL;	private $_rules = NULL;	private $_summary = NULL;	private $_width = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'border': {$this->_border = $this->cdata($x); }break;			case 'bgcolor': {$this->_bgcolor = $this->cdata($x); }break;			case 'cellpadding': {$this->_cellpadding = $this->cdata($x); }break;			case 'cellspacing': {$this->_cellspacing = $this->cdata($x); }break;			case 'datafld': {$this->_datafld = $this->cdata($x); }break;			case 'datasrc': {$this->_align = $this->is_align($x); }break;			case 'dataformatas': {$this->_dataformatas = $this->is_dataformatas($x); }break;			case 'frame': {$this->_frame = $this->is_frame($x); }break;			case 'rules': {$this->_rules = $this->is_rules($x); }break;			case 'summary': {$this->_summary = $this->cdata($x); }break;			case 'width': {$this->_width = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'border': {return $this->_border; }break;			case 'bgcolor': {return $this->_bgcolor; }break;			case 'cellpadding': {return $this->_cellpadding; }break;			case 'cellspacing': {return $this->_cellspacing; }break;			case 'datafld': {return $this->_datafld; }break;			case 'datasrc': {return $this->_align; }break;			case 'dataformatas': {return $this->_dataformatas; }break;			case 'frame': {return $this->_frame; }break;			case 'rules': {return $this->_rules; }break;			case 'summary': {return $this->_summary; }break;			case 'width': {return $this->_width; }break;			default:  parent::__get($element);		}	}	public function getAlign() { return $this->_align; }	public function getBorder() { return $this->_border; }	public function getBgcolor() { return $this->_bgcolor; }	public function getCellpadding() { return $this->_cellpadding; }	public function getCellspacing() { return $this->_cellspacing; }	public function getDatafld() { return $this->_datafld; }	public function getDatasrc() { return $this->_align; }	public function getDataformatas() { return $this->_dataformatas; }	public function getFrame() { return $this->_frame; }	public function getRules() { return $this->_rules; }	public function getSummary() { return $this->_summary; }	public function getWidth() { return $this->_width; }	public function getText() { return $this->temp; }	protected function convertThis()	{		$this->_htmlCode = "<table";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_border !== NULL) { $this->_htmlCode .= " border=\"$this->_border\""; }		if ($this->_bgcolor !== NULL) { $this->_htmlCode .= " bgcolor=\"$this->_bgcolor\""; }		if ($this->_cellpadding !== NULL) { $this->_htmlCode .= " cellpadding=\"$this->_cellpadding\""; }		if ($this->_cellspacing !== NULL) { $this->_htmlCode .= " cellspacing=\"$this->_cellspacing\""; }		if ($this->_datafld !== NULL) { $this->_htmlCode .= " datafld=\"$this->_datafld\""; }		if ($this->_datasrc !== NULL) { $this->_htmlCode .= " datasrc=\"$this->_datasrc\""; }		if ($this->_dataformatas !== NULL) { $this->_htmlCode .= " dataformatas=\"$this->_dataformatas\""; }		if ($this->_frame !== NULL) { $this->_htmlCode .= " frame=\"$this->_frame\""; }		if ($this->_rules !== NULL) { $this->_htmlCode .= " rules=\"$this->_rules\""; }		if ($this->_summary !== NULL) { $this->_htmlCode .= " summary=\"$this->_summary\""; }		if ($this->_width !== NULL) { $this->_htmlCode .= " width=\"$this->_width\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</table>\n";	}}class tbody extends attribute{	private $_align = NULL;	private $_char = NULL;	private $_charoff = NULL;	private $_valign = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'char': {$this->_char = $this->cdata($x); }break;			case 'charoff': {$this->_charoff = $this->cdata($x); }break;			case 'valign': {$this->_valign = $this->is_valign($x); }break;			default:  parent::__set($element,$x);		}	}	public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'char': {return $this->_char; }break;			case 'charoff': {return $this->_charoff; }break;			case 'valign': {return $this->_valign; }break;			default:  parent::__get($element);		}	}	public function getAlign() { return $this->_align; }	public function getChar() { return $this->_char; }	public function getCharoff() { return $this->_charoff; }	public function getValign() { return $this->_valign; }	protected function convertThis()	{		$this->_htmlCode = "<tbody";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_char !== NULL) { $this->_htmlCode .= " char=\"$this->_char\""; }		if ($this->_charoff !== NULL) { $this->_htmlCode .= " charoff=\"$this->_charoff\""; }		if ($this->_valign !== NULL) { $this->_htmlCode .= " valign=\"$this->_valign\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</tbody>\n";	}}class td extends attribute{	private $_align = NULL;	private $_abbr = NULL;	private $_bgcolor = NULL;	private $_axis = NULL;	private $_char = NULL;	private $_charoff = NULL;	private $_colspan = NULL;	private $_headers = NULL;	private $_height = NULL;	private $_nowrap = false;	private $_rowspan = NULL;	private $_scope = NULL;	private $_valign = NULL;	private $_width = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'char': {$this->_char = $this->cdata($x); }break;			case 'axis': {$this->_axis = $this->cdata($x); }break;			case 'abbr': {$this->_abbr = $this->cdata($x); }break;			case 'bgcolor': {$this->_bgcolor = $this->cdata($x); }break;			case 'charoff': {$this->_charoff = $this->cdata($x); }break;			case 'colspan': {$this->_colspan = $this->zahlen($x); }break;			case 'headers': {$this->_headers = $this->idref($x); }break;			case 'height': {$this->_height = $this->cdata($x); }break;			case 'nowrap': {$this->_nowrap = $this->is_boolvalue($x); }break;			case 'rowspan': {$this->_rowspan = $this->zahlen($x); }break;			case 'scope': {$this->_scope = $this->is_scope($x); }break;			case 'valign': {$this->_valign = $this->is_valign($x); }break;			case 'width': {$this->_width = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'char': {return $this->_char; }break;			case 'axis': {return $this->_axis; }break;			case 'abbr': {return $this->_abbr; }break;			case 'bgcolor': {return $this->_bgcolor; }break;			case 'charoff': {return $this->_charoff; }break;			case 'colspan': {return $this->_colspan; }break;			case 'headers': {return $this->_headers; }break;			case 'height': {return $this->_height; }break;			case 'nowrap': {return $this->_nowrap; }break;			case 'rowspan': {return $this->_rowspan; }break;			case 'scope': {return $this->_scope; }break;			case 'valign': {return $this->_valign; }break;			case 'width': {return $this->_width; }break;			default:  parent::__get($element);		}	}	public function getAlign() { return $this->_align; }	public function getChar() { return $this->_char; }	public function getAxis() { return $this->_axis; }	public function getAbbr() { return $this->_abbr; }	public function getBgcolor() { return $this->_bgcolor; }	public function getCharoff() { return $this->_charoff; }	public function getColspan() { return $this->_colspan; }	public function getHeaders() { return $this->_headers; }	public function getHeight() { return $this->_height; }	public function getNowrap() { return $this->_nowrap; }	public function getRowspan() { return $this->_rowspan; }	public function getScope() { return $this->_scope; }	public function getValign() { return $this->_valign; }	public function getWidth() { return $this->_width; }	protected function convertThis()	{		$this->_htmlCode = "<td";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_char !== NULL) { $this->_htmlCode .= " char=\"$this->_char\""; }		if ($this->_bgcolor !== NULL) { $this->_htmlCode .= " bgcolor=\"$this->_bgcolor\""; }		if ($this->_axis !== NULL) { $this->_htmlCode .= " axis=\"$this->_axis\""; }		if ($this->_abbr !== NULL) { $this->_htmlCode .= " abbr=\"$this->_abbr\""; }		if ($this->_charoff !== NULL) { $this->_htmlCode .= " charoff=\"$this->_charoff\""; }		if ($this->_colspan !== NULL) { $this->_htmlCode .= " colspan=\"$this->_colspan\""; }		if ($this->_headers !== NULL) { $this->_htmlCode .= " headers=\"$this->_headers\""; }		if ($this->_height !== NULL) { $this->_htmlCode .= " height=\"$this->_height\""; }		if ($this->_rowspan !== NULL) { $this->_htmlCode .= " rowspan=\"$this->_rowspan\""; }		if ($this->_scope !== NULL) { $this->_htmlCode .= " scope=\"$this->_scope\""; }		if ($this->_valign !== NULL) { $this->_htmlCode .= " valign=\"$this->_valign\""; }		if ($this->_width !== NULL) { $this->_htmlCode .= " width=\"$this->_width\""; }		if ($this->_nowrap === true) { $this->_htmlCode .= " nowrap=\"nowrap\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</td>\n";	}}class tfoot extends attribute{	private $_align = NULL;	private $_char = NULL;	private $_charoff = NULL;	private $_valign = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'char': {$this->_char = $this->cdata($x); }break;			case 'charoff': {$this->_charoff = $this->cdata($x); }break;			case 'valign': {$this->_valign = $this->is_valign($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'char': {return $this->_char; }break;			case 'charoff': {return $this->_charoff; }break;			case 'valign': {return $this->_valign; }break;			default:  parent::__get($element);		}	}	public function getAlign() { return $this->_align; }	public function getChar() { return $this->_char; }	public function getCharoff() { return $this->_charoff; }	public function getValign() { return $this->_valign; }	protected function convertThis()	{		$this->_htmlCode = "<tfoot";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_char !== NULL) { $this->_htmlCode .= " char=\"$this->_char\""; }		if ($this->_charoff !== NULL) { $this->_htmlCode .= " charoff=\"$this->_charoff\""; }		if ($this->_valign !== NULL) { $this->_htmlCode .= " valign=\"$this->_valign\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</tfoot>\n";	}}class th extends attribute{	private $_align = NULL;	private $_abbr = NULL;	private $_bgcolor = NULL;	private $_axis = NULL;	private $_char = NULL;	private $_charoff = NULL;	private $_colspan = NULL;	private $_headers = NULL;	private $_height = NULL;	private $_nowrap = false;	private $_rowspan = NULL;	private $_scope = NULL;	private $_valign = NULL;	private $_width = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'char': {$this->_char = $this->cdata($x); }break;			case 'axis': {$this->_axis = $this->cdata($x); }break;			case 'abbr': {$this->_abbr = $this->cdata($x); }break;			case 'bgcolor': {$this->_bgcolor = $this->cdata($x); }break;			case 'charoff': {$this->_charoff = $this->cdata($x); }break;			case 'colspan': {$this->_colspan = $this->zahlen($x); }break;			case 'headers': {$this->_headers = $this->idref($x); }break;			case 'height': {$this->_height = $this->cdata($x); }break;			case 'nowrap': {$this->_nowrap = $this->is_boolvalue($x); }break;			case 'rowspan': {$this->_rowspan = $this->zahlen($x); }break;			case 'scope': {$this->_scope = $this->is_scope($x); }break;			case 'valign': {$this->_valign = $this->is_valign($x); }break;			case 'width': {$this->_width = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'char': {return $this->_char; }break;			case 'axis': {return $this->_axis; }break;			case 'abbr': {return $this->_abbr; }break;			case 'bgcolor': {return $this->_bgcolor; }break;			case 'charoff': {return $this->_charoff; }break;			case 'colspan': {return $this->_colspan; }break;			case 'headers': {return $this->_headers; }break;			case 'height': {return $this->_height; }break;			case 'nowrap': {return $this->_nowrap; }break;			case 'rowspan': {return $this->_rowspan; }break;			case 'scope': {return $this->_scope; }break;			case 'valign': {return $this->_valign; }break;			case 'width': {return $this->_width; }break;			default:  parent::__get($element);		}	}	public function getAlign() { return $this->_align; }	public function getChar() { return $this->_char; }	public function getAxis() { return $this->_axis; }	public function getAbbr() { return $this->_abbr; }	public function getBgcolor() { return $this->_bgcolor; }	public function getCharoff() { return $this->_charoff; }	public function getColspan() { return $this->_colspan; }	public function getHeaders() { return $this->_headers; }	public function getHeight() { return $this->_height; }	public function getNowrap() { return $this->_nowrap; }	public function getRowspan() { return $this->_rowspan; }	public function getScope() { return $this->_scope; }	public function getValign() { return $this->_valign; }	public function getWidth() { return $this->_width; }	protected function convertThis()	{		$this->_htmlCode = "<th";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_char !== NULL) { $this->_htmlCode .= " char=\"$this->_char\""; }		if ($this->_bgcolor !== NULL) { $this->_htmlCode .= " bgcolor=\"$this->_bgcolor\""; }		if ($this->_axis !== NULL) { $this->_htmlCode .= " axis=\"$this->_axis\""; }		if ($this->_abbr !== NULL) { $this->_htmlCode .= " abbr=\"$this->_abbr\""; }		if ($this->_charoff !== NULL) { $this->_htmlCode .= " charoff=\"$this->_charoff\""; }		if ($this->_colspan !== NULL) { $this->_htmlCode .= " colspan=\"$this->_colspan\""; }		if ($this->_headers !== NULL) { $this->_htmlCode .= " headers=\"$this->_headers\""; }		if ($this->_height !== NULL) { $this->_htmlCode .= " height=\"$this->_height\""; }		if ($this->_rowspan !== NULL) { $this->_htmlCode .= " rowspan=\"$this->_rowspan\""; }		if ($this->_scope !== NULL) { $this->_htmlCode .= " scope=\"$this->_scope\""; }		if ($this->_valign !== NULL) { $this->_htmlCode .= " valign=\"$this->_valign\""; }		if ($this->_width !== NULL) { $this->_htmlCode .= " width=\"$this->_width\""; }		if ($this->_nowrap === true) { $this->_htmlCode .= " nowrap=\"nowrap\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</th>\n";	}}class thead extends attribute{	private $_align = NULL;	private $_char = NULL;	private $_charoff = NULL;	private $_valign = NULL;	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'char': {$this->_char = $this->cdata($x); }break;			case 'charoff': {$this->_charoff = $this->cdata($x); }break;			case 'valign': {$this->_valign = $this->is_valign($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'char': {return $this->_char; }break;			case 'charoff': {return $this->_charoff; }break;			case 'valign': {return $this->_valign; }break;			default:  parent::__get($element);		}	}	public function getAlign() { return $this->_align; }	public function getChar() { return $this->_char; }	public function getCharoff() { return $this->_charoff; }	public function getValign() { return $this->_valign; }	protected function convertThis()	{		$this->_htmlCode = "<thead";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_char !== NULL) { $this->_htmlCode .= " char=\"$this->_char\""; }		if ($this->_charoff !== NULL) { $this->_htmlCode .= " charoff=\"$this->_charoff\""; }		if ($this->_valign !== NULL) { $this->_htmlCode .= " valign=\"$this->_valign\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</thead>\n";	}}class tr extends attribute{	private $_align = NULL;	private $_bgcolor = NULL;	private $_char = NULL;	private $_charoff = NULL;	private $_valign = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'char': {$this->_char = $this->cdata($x); }break;			case 'charoff': {$this->_charoff = $this->cdata($x); }break;			case 'valign': {$this->_valign = $this->is_valign($x); }break;			case 'bgcolor': {$this->_bgcolor = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'char': {return $this->_char; }break;			case 'charoff': {return $this->_charoff; }break;			case 'valign': {return $this->_valign; }break;			case 'bgcolor': {return $this->_bgcolor; }break;			default:  parent::__get($element);		}	}	public function getAlign() { return $this->_align; }	public function getChar() { return $this->_char; }	public function getCharoff() { return $this->_charoff; }	public function getValign() { return $this->_valign; }	public function getText() { return $this->temp; }	public function getBgcolor() { return $this->_bgcolor; }	protected function convertThis()	{		$this->_htmlCode = "<tr";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_char !== NULL) { $this->_htmlCode .= " char=\"$this->_char\""; }		if ($this->_charoff !== NULL) { $this->_htmlCode .= " charoff=\"$this->_charoff\""; }		if ($this->_valign !== NULL) { $this->_htmlCode .= " valign=\"$this->_valign\""; }		if ($this->_bgcolor !== NULL) { $this->_htmlCode .= " bgcolor=\"$this->_bgcolor\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</tr>\n";	}}?>