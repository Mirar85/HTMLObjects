<?phpnamespace de\chilan\HtmlObjects;use \Exception as Exception;class frame extends attribute{	private $_frameborder = NULL;	private $_longdesc = NULL;	private $_marginwidth = NULL;	private $_marginheight = NULL; 	private $_name = NULL;	private $_noresize = false;	private $_scrolling = NULL;	private $_src = NULL;	public function __construct() { 		$this->initDOM();	}	public function __set($element,$x)	{		switch ($element)		{			case 'frameborder': {$this->_frameborder = $this->is_border($x); }break;			case 'longdesc': {$this->_longdesc = $this->cdata($x); }break;			case 'marginwidth': {$this->_marginwidth = $this->cdata($x); }break;			case 'marginheight': {$this->_marginheight = $this->cdata($x); }break;			case 'name': {$this->_name = $this->cdata($x); }break;			case 'noresize': {$this->_noresize = $this->is_boolvalue($x); }break;			case 'scrolling': {$this->_scrolling = $this->is_scrolling($x); }break;			case 'src': {$this->_src = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'frameborder': {return $this->_frameborder; }break;			case 'longdesc': {return $this->_longdesc; }break;			case 'marginwidth': {return $this->_marginwidth; }break;			case 'marginheight': {return $this->_marginheight; }break;			case 'name': {return $this->_name; }break;			case 'noresize': {return $this->_noresize; }break;			case 'scrolling': {return $this->_scrolling; }break;			case 'src': {return $this->_src; }break;			default:  parent::__get($element);		}	}		public function getFameborder() { return $this->_frameborder; }	public function getLongdesc() { return $this->_longdesc; }	public function getMarginwidth() { return $this->_marginwidth; }	public function getMarginheight() { return $this->_marginheight; }	public function getName() { return $this->_name; }	public function getNoresize() { return $this->_noresize; }	public function getScrolling() { return $this->_scrolling; }	public function getSrc() { return $this->_src; }	protected function convertThis()	{		$this->_htmlCode = "<frame";		parent::convertThis();		if ($this->_frameborder !== NULL) { $this->_htmlCode .= " frameborder=\"$this->_frameborder\""; }		if ($this->_longdesc !== NULL) { $this->_htmlCode .= " longdesc=\"$this->_longdesc\""; }		if ($this->_marginwidth !== NULL) { $this->_htmlCode .= " marginwidth=\"$this->_marginwidth\""; }		if ($this->_marginheight !== NULL) { $this->_htmlCode .= " marginheight=\"$this->_marginheight\""; }		if ($this->_name !== NULL) { $this->_htmlCode .= " name=\"$this->_name\""; }		if ($this->_noresize === true) { $this->_htmlCode .= " noresize=\"noresize\""; }		if ($this->_scrolling !== NULL) { $this->_htmlCode .= " scrolling=\"$this->_scrolling\""; }		if ($this->_src !== NULL) { $this->_htmlCode .= " src=\"$this->_src\""; }		return $this->_htmlCode .= " />\n";	}}class frameset extends attribute{	private $_cols = NULL;	private $_rows = NULL;	private $_onload = NULL;	private $_onunload = NULL; 	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			case 'cols': {$this->_cols = $this->cdata($x); }break;			case 'rows': {$this->_rows = $this->cdata($x); }break;			case 'onload': {$this->_onload = $this->cdata($x); }break;			case 'onunload': {$this->_onunload = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'cols': {return $this->_cols; }break;			case 'rows': {return $this->_rows; }break;			case 'onload': {return $this->_onload; }break;			case 'onunload': {return $this->_onunload; }break;			default:  parent::__get($element);		}	}		public function getCols() { return $this->_cols; }	public function getRows() { return $this->_rows; }	public function getOnload() { return $this->_onload; }	public function getOnunload() { return $this->_onunload; }		protected function convertThis()	{		$this->_htmlCode = "<frameset";		parent::convertThis();		if ($this->_cols !== NULL) { $this->_htmlCode .= " cols=\"$this->_cols\""; }		if ($this->_rows !== NULL) { $this->_htmlCode .= " rows=\"$this->_rows\""; }		if ($this->_onload !== NULL) { $this->_htmlCode .= " onload=\"$this->_onload\""; }		if ($this->_onunload !== NULL) { $this->_htmlCode .= " onunload=\"$this->_onunload\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</frameset>\n";	}}class iframe extends attribute{	private $_frameborder = NULL;	private $_longdesc = NULL;	private $_marginwidth = NULL;	private $_marginheight = NULL; 	private $_name = NULL;	private $_noresize = false;	private $_scrolling = NULL;	private $_src = NULL;	private $_width = NULL;	private $_height = NULL;	private $_align = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			case 'frameborder': {$this->_frameborder = $this->is_border($x); }break;			case 'longdesc': {$this->_longdesc = $this->cdata($x); }break;			case 'marginwidth': {$this->_marginwidth = $this->cdata($x); }break;			case 'marginheight': {$this->_marginheight = $this->cdata($x); }break;			case 'name': {$this->_name = $this->cdata($x); }break;			case 'noresize': {$this->_noresize = $this->is_boolvalue($x); }break;			case 'scrolling': {$this->_scrolling = $this->is_scrolling($x); }break;			case 'src': {$this->_src = $this->cdata($x); }break;			case 'width': {$this->_width = $this->cdata($x); }break;			case 'height': {$this->_height = $this->cdata($x); }break;			case 'align': {$this->_align = $this->is_align($x); }break;			default:  parent::__set($element,$x);		}	}			public function __get($element)	{		switch ($element)		{			case 'frameborder': {return $this->_frameborder; }break;			case 'longdesc': {return $this->_longdesc; }break;			case 'marginwidth': {return $this->_marginwidth; }break;			case 'marginheight': {return $this->_marginheight; }break;			case 'name': {return $this->_name; }break;			case 'noresize': {return $this->_noresize; }break;			case 'scrolling': {return $this->_scrolling; }break;			case 'src': {return $this->_src; }break;			case 'width': {return $this->_width; }break;			case 'height': {return $this->_height; }break;			case 'align': {return $this->_align; }break;			default:  parent::__get($element);		}	}	public function getFrameborder() { return $this->_frameborder; }	public function getLongdesc() { return $this->_longdesc; }	public function getMarginwidth() { return $this->_marginwidth; }	public function getMarginheight() { return $this->_marginheight; }	public function getName() { return $this->_name; }	public function getNoresize() { return $this->_noresize; }	public function getScrolling() { return $this->_scrolling; }	public function getSrc() { return $this->_src; }	public function getWidth() { return $this->_width; }	public function getHeight() { return $this->_height; }	public function getAlign() { return $this->_align; }	protected function convertThis()	{		$this->_htmlCode = "<iframe";		parent::convertThis();		if ($this->_frameborder !== NULL) { $this->_htmlCode .= " frameborder=\"$this->_frameborder\""; }		if ($this->_longdesc !== NULL) { $this->_htmlCode .= " longdesc=\"$this->_longdesc\""; }		if ($this->_marginwidth !== NULL) { $this->_htmlCode .= " marginwidth=\"$this->_marginwidth\""; }		if ($this->_marginheight !== NULL) { $this->_htmlCode .= " marginheight=\"$this->_marginheight\""; }		if ($this->_name !== NULL) { $this->_htmlCode .= " name=\"$this->_name\""; }		if ($this->_noresize === true) { $this->_htmlCode .= " noresize=\"noresize\""; }		if ($this->_scrolling !== NULL) { $this->_htmlCode .= " scrolling=\"$this->_scrolling\""; }		if ($this->_src !== NULL) { $this->_htmlCode .= " src=\"$this->_src\""; }		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_width !== NULL) { $this->_htmlCode .= " width=\"$this->_width\""; }		if ($this->_height !== NULL) { $this->_htmlCode .= " height=\"$this->_height\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</iframe>\n";	}}class li extends attribute{	private $_type = NULL;	private $_value = NULL;		public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'type': {$this->_type = $this->is_litype($x); }break;			case 'value': {$this->_value = $this->zahlen($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'type': {return $this->_type; }break;			case 'value': {return $this->_value; }break;			default:  parent::__get($element);		}	}	public function getType() { return $this->_type; }	public function getValue() { return $this->_value; }	protected function convertThis()	{		$this->_htmlCode = "<li";		parent::convertThis();		if ($this->_type !== NULL) { $this->_htmlCode .= " type=\"$this->_type\""; }		if ($this->_value !== NULL) { $this->_htmlCode .= " value=\"$this->_value\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</li>\n";	}}class noframes extends attribute{	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<noframes";		parent::convertThis();		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</noframes>\n";	}}class ol extends attribute{	private $_compact =false;	private $_start = NULL;	private $_type = NULL;		public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'type': {$this->_type = $this->is_oltype($x); }break;			case 'start': {$this->_start = $this->zahlen($x); }break;			case 'compact': {$this->_compact = $this->is_boolvalue($x);}break;			default:  parent::__set($element,$x);		} 	}		public function __get($element)	{		switch ($element)		{			case 'type': {return $this->_type; }break;			case 'start': {return $this->_start; }break;			case 'compact': {return $this->_compact;}break;			default:  parent::__get($element);		} 	}	public function getType() { return $this->type; }	public function getStart() { return $this->start; }	public function getCompact() { return $this->compact; }	protected function convertThis()	{		$this->_htmlCode = "<ol";		parent::convertThis();		if ($this->_type !== NULL) { $this->_htmlCode .= " type=\"$this->_type\""; }		if ($this->_start !== NULL) { $this->_htmlCode .= " start=\"$this->_start\""; }		if ($this->_compact === true) { $this->_htmlCode .= " compact=\"compact\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</ol>\n";	}}class ul extends attribute{	private $_compact =false;	private $_type = NULL;	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			case 'type': {$this->_type = $this->is_ultype($x); }break;			case 'compact': {$this->_compact = $this->is_boolvalue($x);}break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'type': {return $this->_type; }break;			case 'compact': {return $this->_compact;}break;			default:  parent::__get($element);		}	}	public function getType() { return $this->_type; }	public function getCompact() { return $this->_compact; }	protected function convertThis()	{		$this->_htmlCode = "<ul";		parent::convertThis();		if ($this->_type !== NULL) { $this->_htmlCode .= " type=\"$this->_type\""; }		if ($this->_compact === true) { $this->_htmlCode .= " compact=\"compact\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</ul>\n";	}}?>