<?phpnamespace de\chilan\HtmlObjects;use \Exception as Exception;class abbr extends attribute{	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<abbr";		parent::convertThis();		$this->_htmlCode .= ">";		$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</abbr>\n";	}}class acronym extends attribute{	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<acronym";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</acronym>\n";	}}class address extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	public function getText() { return $this->temp; }	protected function convertThis()	{		$this->_htmlCode = "<address";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</address>\n";	}}class b extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<b";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</b>\n";	}}class bdo extends attribute{	public function __construct($x,$z = NULL) {		$this->initDOM();		$this->dir = is_dir($x);		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<bdo";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</bdo>\n";	}}class big extends attribute{	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<big";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</big>\n";	}}class blockquote extends attribute{	private $_cite = NULL;		public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'cite': {$this->_cite = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'cite': {return $this->_cite; }break;			default:  parent::__get($element);		}	}	public function getCite($x) {return $this->_cite; }	protected function convertThis()	{		$this->_htmlCode = "<blockquote";		parent::convertThis();		if ($this->_cite !== NULL) { $this->_htmlCode .= " cite=\"$this->_cite\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</blockquote>\n";	}}class br extends attribute{	private $_clear = NULL;	public function __construct() {			$this->initDOM();	}	public function __set($element,$x)	{		switch ($element)		{			case 'clear': {$this->_clear = $this->is_clear($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'clear': {return $this->_clear; }break;			default:  parent::__get($element);		}	}	public function getClear() { return $this->_clear; }	public function getBr() { return $this->connvertThis();}		protected function convertThis()	{		$this->_htmlCode = "<br";		parent::convertThis();		if ($this->_clear !== NULL) { $this->_htmlCode .= " clear=\"$this->_clear\""; }		return $this->_htmlCode .= " />";	}}class cite extends attribute{	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis ()	{		$this->_htmlCode = "<cite";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</cite>\n";	}}class code extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function connvertThis ()	{		$this->_htmlCode = "<code";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</code>\n";	}}class del extends attribute{	private $_cite = NULL;	private $_datetime = NULL;	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'cite': {$this->_cite = $this->cdata($x); }break;			case 'datetime': {$this->_datetime = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'cite': {return $this->_cite; }break;			case 'datetime': {return $this->_datetime; }break;			default:  parent::__get($element);		}	}	public function getCite() { return $this->_cite; }	public function getDatetime() { return $this->_datetime; }	protected function convertThis()	{		$this->_htmlCode = "<del";		parent::convertThis();		if ($this->_cite !== NULL) { $this->_htmlCode .= " cite=\"$this->_cite\""; }		if ($this->_datetime !== NULL) { $this->_htmlCode .= " datetime=\"$this->_datetime\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</del>\n";	}}class dfn extends attribute{	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<dfn";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</dfn>\n";	}}class em extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<em";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</em>\n";	}}abstract class ueberschrift extends attribute{	protected $_headerzahl;	protected $_align = NULL;		abstract public function __construct($z);		public function __get($element) {			switch ($element)		{			case 'align': {return $this->getAlign($x);}break;			default:  parent::__set($element,$x);		}				$trace = debug_backtrace();        trigger_error(            'Undefined property via __get(): ' . $name .            ' in ' . $trace[0]['file'] .            ' on line ' . $trace[0]['line'],            E_USER_NOTICE);        return null;	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->align = $this->is_align($x);}break;			default:  parent::__set($element,$x);		}	}	public function getAlign() {return $this->align; }	protected function convertThis()	{		$this->_htmlCode = "<$this->_headerzahl";		parent::convertThis();		if ($this->align !== NULL) { $this->_htmlCode .= " align=\"$this->align\""; }		$this->_htmlCode .= ">";		$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</$this->_headerzahl>\n";	}}class h1 extends ueberschrift{	public function __construct($z = NULL) {		$this->initDOM();		$this->_headerzahl = "h1";		if ($z != NULL) {			$this->insert($z);		}	}}class h2 extends ueberschrift{	public function __construct($z = NULL) {		$this->initDOM();		$this->_headerzahl = "h2";		if ($z != NULL) {			$this->insert($z);		}	}}class h3 extends ueberschrift{	public function __construct($z = NULL) {		$this->initDOM();		$this->_headerzahl = "h3";		if ($z != NULL) {			$this->insert($z);		}	}}class h4 extends ueberschrift{	public function __construct($z = NULL) {		$this->initDOM();		$this->_headerzahl = "h4";		if ($z != NULL) {			$this->insert($z);		}	}}class h5 extends ueberschrift{	public function __construct($z = NULL) {		$this->initDOM();		$this->_headerzahl = "h5";		if ($z != NULL) {			$this->insert($z);		}	}}class h6 extends ueberschrift{	public function __construct($z = NULL) {		$this->initDOM();		$this->_headerzahl = "h6";		if ($z != NULL) {			$this->insert($z);		}	}}class hr extends attribute{	private $_align = NULL;	private $_noshade = false;	private $_size = NULL;	private $_width = NULL;	public function __construct() { 		$this->initDOM();	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->_align = $this->is_align($x); }break;			case 'noshade': {$this->_noshade = $this->is_boolvalue($x); }break;			case 'size': {$this->_size = $this->cdata($x); }break;			case 'width': {$this->_width = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			case 'noshade': {return $this->_noshade; }break;			case 'size': {return $this->_size; }break;			case 'width': {return $this->_width; }break;			default:  parent::__get($element);		}	}	public function getAlign() {return $this->_align; }	public function getNoshade() {return $this->_noshade; }	public function getSize() {return $this->_size; }	public function getWidth() {return $this->_width; }		protected function convertThis()	{		$this->_htmlCode = "<hr";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		if ($this->_noshade === true) { $this->_htmlCode .= " noshade=\"noshade\""; }		if ($this->_size !== NULL) { $this->_htmlCode .= " size=\"$this->_size\""; }		if ($this->_width !== NULL) { $this->_htmlCode .= " width=\"$this->_width\""; }		return $this->_htmlCode .= " />\n";	}}class i extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<i";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</i>\n";	}}class ins extends attribute{	private $_cite = NULL;	private $_datetime = NULL;	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'cite': {$this->_cite = $this->cdata($x); }break;			case 'datetime': {$this->_datetime = $this->cdata($x); }break;			default:  parent::__set($element,$x);		} 	}		public function __get($element)	{		switch ($element)		{			case 'cite': {return $this->_cite; }break;			case 'datetime': {return $this->_datetime; }break;			default:  parent::__get($element);		} 	}		public function getCite() {return $this->_cite; }	public function getDatetime() {return $this->_datetime; }		protected function convertThis()	{		$this->_htmlCode = "<ins";		parent::convertThis();		if ($this->_cite !== NULL) { $this->_htmlCode .= " cite=\"$this->_cite\""; }		if ($this->_datetime !== NULL) { $this->_htmlCode .= " datetime=\"$this->_datetime\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</ins>\n";	}}class kbd extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<kbd";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</kbd>\n";	}}class p extends attribute{	private $_align = NULL;	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'align': {$this->align = $this->_is_align($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'align': {return $this->_align; }break;			default:  parent::__get($element);		}	}	public function getAlign() {return $this->_align; }	protected function convertThis()	{		$this->_htmlCode = "<p";		parent::convertThis();		if ($this->_align !== NULL) { $this->_htmlCode .= " align=\"$this->_align\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</p>\n";	}}class pre extends attribute{	private $_width = NULL;	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'width': {$this->_width = $this->zahlen($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'width': {return $this->_width; }break;			default:  parent::__get($element);		}	}	public function getWidth($x) {return $this->_width; }	protected function convertThis()	{		$this->_htmlCode = "<pre";		parent::convertThis();		if ($this->_width !== NULL) { $this->_htmlCode .= " width=\"$this->_width\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</pre>\n";	}}class q extends attribute{	private $_cite = NULL;	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			case 'cite': {$this->_cite = $this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'cite': {return $this->_cite; }break;			default:  parent::__get($element);		}	}	public function getCite() {return $this->_cite; }	protected function convertThis()	{		$this->_htmlCode = "<q";		parent::convertThis();		if ($this->_cite !== NULL) { $this->_htmlCode .= " cite=\"$this->_cite\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</q>\n";	}}class samp extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<samp";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</samp>\n";	}}class small extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<small";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</small>\n";	}}class span extends attribute{	private $_datafld = NULL;	private $_datasrc = NULL;	private $_dataformatas = NULL;	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'datafld': {$this->_datafld = $this->cdata($x); }break;			case 'datasrc': {$this->_datasrc = $this->cdata($x); }break;			case 'dataformatas': {$this->_dataformatas = $this->is_dataformatas($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'datafld': {return $this->_datafld; }break;			case 'datasrc': {return $this->_datasrc; }break;			case 'dataformatas': {return $this->_dataformatas; }break;			default:  parent::__get($element);		}	}	public function getDatafld() {return $this->_datafld; }	public function getDatasrc() {return $this->_datasrc; }	public function getDataformatas() {return $this->_dataformatas; }		protected function convertThis()	{		$this->_htmlCode = "<span";		parent::convertThis();		if ($this->_datafld !== NULL) { $this->_htmlCode .= " datafld=\"$this->_datafld\""; }		if ($this->_datasrc !== NULL) { $this->_htmlCode .= " datasrc=\"$this->_datasrc\""; }		if ($this->_dataformatas !== NULL) { $this->_htmlCode .= " dataformatas=\"$this->_dataformatas\""; }		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</span>\n";	}}class strong extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<strong";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</strong>\n";	}}class sub extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<sub";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</sub>\n";	}}class sup extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<sup";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</sup>\n";	}}class tt extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<tt";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</tt>\n";	}}class htmlvar extends attribute{	public function __construct($z = NULL) {		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		} 	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<var";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</var>\n";	}}?>