<?phpnamespace de\chilan\HtmlObjects;use \Exception as Exception;class base extends first{	private $_href = "";	private $_target = NULL;	public function __construct($x) {		$this->initDOM();		$this->_href = $this->cdata($x);	}	public function __set($element,$x)	{		switch ($element)		{			case 'href': { $this->_href=$this->cdata($x); }break;			case 'target': { $this->_target=$this->cdata($x); }break;			default: 							{				try 				{					$error = "$element is not a attribute from ".get_class($this)."!";					throw new Exception($error);				}				catch (Exception $e)				{					$var = $e->getTrace();					die("<b>HTML Class Fault: </b>".$e->getMessage()." in <b>".$var[2][file]."</b> on line <b>".$var[2][line]."</b>\n<br />");				}			}		}	}		public function __get($element)	{		switch ($element)		{			case 'href': { return $this->_href; }break;			case 'target': { return $this->_target; }break;			default: 							{				try 				{					$error = "$element is not a attribute from ".get_class($this)."!";					throw new Exception($error);				}				catch (Exception $e)				{					$var = $e->getTrace();					die("<b>HTML Class Fault: </b>".$e->getMessage()." in <b>".$var[2][file]."</b> on line <b>".$var[2][line]."</b>\n<br />");				}			}		}	}	public function getHref () { return $this->_href; }	public function getTarget () { return $this->_target; }	protected function convertThis()	{		$this->_htmlCode = "<base";		if ($this->_href !== NULL) { $this->_htmlCode .= " href=\"$this->_href\""; }		if ($this->_target !== NULL) { $this->_htmlCode .= " target=\"$this->_target\""; }		return $this->_htmlCode .= " />\n";	}}class head extends checkInput{	private $_profil = NULL;		public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}	}		public function __set($element,$x)	{		switch ($element)		{			case 'profil': { $this->_profil=$this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'profil': { return $this->_profil; }break;			default:  parent::__get($element);		}	}		public function getProfil() { return $this->_profil; }	protected function convertThis()	{		$this->_htmlCode = "<head";		parent::convertThis();		if ($this->_profil !== NULL) { $this->_htmlCode .= " profil=\"$this->_profil\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</head>\n";	}}class link extends attribute{	private $_charset = NULL;	private $_href = NULL;	private $_hreflang = NULL;	private $_media = NULL;	private $_rel = NULL;	private $_rev = NULL;	private $_target = NULL;	private $_type = NULL;	public function __construct() { 		$this->initDOM(); 	}		public function __set($element,$x)	{		switch ($element)		{			case 'charset': { $this->_charset=$this->cdata($x); }break;			case 'href': { $this->_href=$this->cdata($x); }break;			case 'hreflang': { $this->_hreflang=$this->cdata($x); }break;			case 'media': { $this->_media=$this->cdata($x); }break;			case 'rel': { $this->_rel=$this->cdata($x); }break;			case 'rev': { $this->_rev=$this->cdata($x); }break;			case 'target': { $this->_target=$this->cdata($x); }break;			case 'type': { $this->_type=$this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'charset': { return $this->_charset; }break;			case 'href': { return $this->_href; }break;			case 'hreflang': { return $this->_hreflang; }break;			case 'media': { return $this->_media; }break;			case 'rel': { return $this->_rel; }break;			case 'rev': { return $this->_rev; }break;			case 'target': { return $this->_target; }break;			case 'type': { return $this->_type; }break;			default:  parent::__get($element);		}	}	public function getCharset() { return $this->_charset; }	public function getHref() { return $this->_href; }	public function getHreflang() { return $this->_hreflang; }	public function getMedia() { return $this->_media; }	public function getRel() { return $this->_rel; }	public function getRev() { return $this->_rev; }	public function getTarget() { return $this->_target; }	public function getType() { return $this->_type; }	protected function convertThis()	{		$this->_htmlCode = "<link";		parent::convertThis();		if ($this->_charset !== NULL) { $this->_htmlCode .= " charset=\"$this->_charset\""; }		if ($this->_href !== NULL) { $this->_htmlCode .= " href=\"$this->_href\""; }		if ($this->_hreflang !== NULL) { $this->_htmlCode .= " hreflang=\"$this->_hreflang\""; }		if ($this->_media !== NULL) { $this->_htmlCode .= " media=\"$this->_media\""; }		if ($this->_rel !== NULL) { $this->_htmlCode .= " rel=\"$this->_rel\""; }		if ($this->_rev !== NULL) { $this->_htmlCode .= " rev=\"$this->_rev\""; }		if ($this->_target !== NULL) { $this->_htmlCode .= " target=\"$this->_target\""; }		if ($this->_type !== NULL) { $this->_htmlCode .= " type=\"$this->_type\""; }		return $this->_htmlCode .= " />\n";	}}class meta extends checkInput{	private $_name = NULL;	private $_content = NULL;	private $_httpequiv = NULL;	private $_scheme = NULL;	public function __construct($x = NULL) {		$this->initDOM();		$this->content=$this->cdata($x); 	}		public function __set($element,$x)	{		switch ($element)		{			case 'name': { $this->_name=$this->idref($x); }break;			case 'content': { $this->_content=$this->cdata($x); }break;			case 'httpequiv': { $this->_httpequiv=$this->idref($x); }break;			case 'scheme': { $this->_scheme=$this->idref($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'name': { return $this->_name; }break;			case 'content': { return $this->_content; }break;			case 'httpequiv': { return $this->_httpequiv; }break;			case 'scheme': { return $this->_scheme; }break;			default:  parent::__get($element);		}	}	public function getName() { return $this->_name; }	public function getContent() { return $this->_content; }	public function getHttpequiv() { return $this->_httpequiv; }	public function getScheme() { return $this->_scheme; }	protected function convertThis()	{		$this->_htmlCode = "<meta";		parent::convertThis();		if ($this->_name !== NULL) { $this->_htmlCode .= " name=\"$this->_name\""; }		if ($this->_content !== NULL) { $this->_htmlCode .= " content=\"$this->_content\""; }		if ($this->_httpequiv !== NULL) { $this->_htmlCode .= " http-equiv=\"$this->_httpequiv\""; }		if ($this->_scheme !== NULL) { $this->_htmlCode .= " scheme=\"$this->_scheme\""; }		return $this->_htmlCode .= " />\n";	}}class style extends checkInput{	private $_media = NULL;	private $_title = NULL;	private $_type = "";	public function __construct($x,$z = NULL) {		$this->initDOM();		$this->type=$this->cdata($x);		if ($z != NULL) {			$this->insert($z);		}	}	public function __set($element,$x)	{		switch ($element)		{			case 'media': { $this->_media=$this->cdata($x); }break;			case 'title': { $this->_title=$this->cdata($x); }break;			case 'type': { $this->_type=$this->cdata($x); }break;			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			case 'media': { return $this->_media; }break;			case 'title': { return $this->_title; }break;			case 'type': { return $this->_type; }break;			default:  parent::__get($element);		}	}	public function getMedia() { return $this->_media; }	public function getTitle() { return $this->_title; }	public function getType() { return $this->_type; }	public function getText() { return $this->temp; }	protected function convertThis()	{		$this->_htmlCode = "<style";		parent::convertThis();		if ($this->_media !== NULL) { $this->_htmlCode .= " media=\"$this->_media\""; }		if ($this->_title !== NULL) { $this->_htmlCode .= " title=\"$this->_title\""; }		if ($this->_type !== NULL) { $this->_htmlCode .= " type=\"$this->_type\""; }		$this->_htmlCode .= ">\n";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</style>\n";	}}class title extends attribute{	public function __construct($z = NULL) { 		$this->initDOM();		if ($z != NULL) {			$this->insert($z);		}		}	public function __set($element,$x)	{		switch ($element)		{			default:  parent::__set($element,$x);		}	}		public function __get($element)	{		switch ($element)		{			default:  parent::__get($element);		}	}	protected function convertThis()	{		$this->_htmlCode = "<title";		parent::convertThis();		$this->_htmlCode .= ">";				$this->_htmlCode = $this->convert($this->_htmlCode);				return $this->_htmlCode .= "</title>\n";	}}?>